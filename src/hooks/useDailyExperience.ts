import { useState, useEffect } from 'react';
import { useTelegramWebApp } from '../utils/telegram';
import { safeLocalStorage } from '../utils/security';

interface DailyExperience {
  lastVisit: string;
  isFirstVisitToday: boolean;
  consecutiveDays: number;
  quickActions: string[];
}

const STORAGE_KEY = 'gropy-daily-experience';

export const useDailyExperience = () => {
  const { hapticFeedback, isAvailable: isTelegram } = useTelegramWebApp();
  const [dailyExp, setDailyExp] = useState<DailyExperience>(() => {
    const saved = safeLocalStorage.get(STORAGE_KEY);
    const today = new Date().toDateString();
    
    if (saved) {
      const isFirstToday = saved.lastVisit !== today;
      return {
        ...saved,
        isFirstVisitToday: isFirstToday,
        consecutiveDays: isFirstToday ? saved.consecutiveDays + 1 : saved.consecutiveDays
      };
    }
    
    return {
      lastVisit: today,
      isFirstVisitToday: true,
      consecutiveDays: 1,
      quickActions: []
    };
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    safeLocalStorage.set(STORAGE_KEY, dailyExp);
  }, [dailyExp]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è
  const markVisitToday = () => {
    const today = new Date().toDateString();
    setDailyExp(prev => ({
      ...prev,
      lastVisit: today,
      isFirstVisitToday: false
    }));
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
  const addQuickAction = (action: string) => {
    setDailyExp(prev => ({
      ...prev,
      quickActions: [action, ...prev.quickActions.slice(0, 4)] // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
    }));
  };

  // Haptic feedback –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
  const celebrateCompletion = () => {
    if (isTelegram) {
      hapticFeedback('success');
    }
  };

  const feedbackOnAction = () => {
    if (isTelegram) {
      hapticFeedback('light');
    }
  };

  const feedbackOnError = () => {
    if (isTelegram) {
      hapticFeedback('error');
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
  const getGreeting = (): string => {
    const hour = new Date().getHours();
    
    if (hour < 6) return '–î–æ–±—Ä–æ–π –Ω–æ—á–∏! üåô';
    if (hour < 12) return '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è';
    if (hour < 18) return '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üå§Ô∏è';
    return '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåÖ';
  };

  // –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–∏–∑–∏—Ç–∞
  const getWelcomeMessage = (): string => {
    if (dailyExp.isFirstVisitToday) {
      if (dailyExp.consecutiveDays === 1) {
        return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Gropy! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –º–∞–ª–æ–≥–æ üå±';
      }
      if (dailyExp.consecutiveDays > 7) {
        return `–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –£–∂–µ ${dailyExp.consecutiveDays} –¥–Ω–µ–π —Å –Ω–∞–º–∏! üî•`;
      }
      return `–î–µ–Ω—å ${dailyExp.consecutiveDays} —Å Gropy! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–µ üí™`;
    }
    return '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ —Å–¥–µ–ª–∞–µ–º —Å–µ–≥–æ–¥–Ω—è? ‚ú®';
  };

  return {
    dailyExp,
    markVisitToday,
    addQuickAction,
    celebrateCompletion,
    feedbackOnAction,
    feedbackOnError,
    getGreeting,
    getWelcomeMessage,
    isTelegram,
  };
};
